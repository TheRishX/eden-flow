/**
 * @file Firestore Security Rules for FocusTab application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user has exclusive access to their profile data, tasks, quick links, and settings.
 * @data_structure All data is nested under /users/{userId}, creating a clear hierarchy for user-specific data. Tasks are stored in /users/{userId}/tasks/{taskId}, quick links in /users/{userId}/quickLinks/{quickLinkId}, and user settings in /users/{userId}/userSettings/{userSettingsId}.
 * @key_security_decisions User listing is disallowed. Read and write access to user data is strictly limited to the authenticated user matching the {userId} in the path. All write operations require the user to be signed in.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read, update, or delete their own profile if the userId matches their auth UID.
     * @deny (create, get, update, delete) Any operation where the userId does not match the authenticated user's UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to task documents within a user's task list.
     * @path /users/{userId}/tasks/{taskId}
     * @allow (create) Authenticated user can create a task in their own task list if the userId matches their auth UID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update, or delete tasks in their own task list if the userId matches their auth UID.
     * @deny (create, get, list, update, delete) Any operation where the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to quick link documents within a user's quick links.
     * @path /users/{userId}/quickLinks/{quickLinkId}
     * @allow (create) Authenticated user can create a quick link in their own quick links if the userId matches their auth UID.
     * @allow (get, list, update, delete) Authenticated user can read, list, update, or delete quick links in their own quick links if the userId matches their auth UID.
     * @deny (create, get, list, update, delete) Any operation where the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quickLinks/{quickLinkId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Controls access to user settings documents.
      * @path /users/{userId}/userSettings/{userSettingsId}
      * @allow (create) Authenticated user can create their own settings if the userId matches their auth UID.
      * @allow (get, update, delete) Authenticated user can read, update, or delete their own settings if the userId matches their auth UID.
      * @allow (list) Authenticated user can list their own settings if the userId matches their auth UID.
      * @deny (create, get, update, delete) Any operation where the userId does not match the authenticated user's UID.
      * @principle Enforces document ownership for all operations.
      */
    match /users/{userId}/userSettings/{userSettingsId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}